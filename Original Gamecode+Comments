J.H=Jory Haberman R.K=Ryan Khandaker B.C=Brian Choi

from random import choice
from turtle import *

from freegames import floor, vector

#center=Turtle(visible=True)
#center.goto(0,0)

state = {'score': 0} #Allows the user to see the score which starts from 0 B.C
path = Turtle(visible=False) #Generates a turtle object with name path and makes the indicator not visible J.H
writer = Turtle(visible=False) #Same as above but object is called writer J.H
aim = vector(5, 0) # Pacman is a vector object and it moves using aim which equals vector(5,0) B.C
pacman = vector(-40, -80)
ghosts = [
    [vector(-180, 160), vector(5, 0)],          #The first vector in each tuple in the list of tuples is the spawn location of the ghosts J.H
    [vector(-180, -160), vector(0, 5)],
    [vector(100, 160), vector(0, -5)],
    [vector(100, -160), vector(-5, 0)],
]
# fmt: off
tiles = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #tiles[0] is located at (x=-200,y=180) last 0 in the uppermost row is (x,y)=(180,180) J.H/R.K
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]
# fmt: on


def square(x, y): #Makes a function that generates a 20,20 square at location x,y (Ends at x,y as well) R.K
    """Draw square using path at (x, y)."""
    path.up()
    path.goto(x, y)
    path.down()
    path.begin_fill()

    for count in range(4): #Makes count equale to 0,1,2,3 and moves it 4 times making a 20,20 square R.K
        path.forward(20)
        path.left(90)

    path.end_fill()


def offset(point): #Turns (x,y) coordinates into index in our list named tiles J.H/R.K
    """Return offset of point in tiles."""
    x = (floor(point.x, 20) + 200) / 20 #Floors it to 20 becuase squares are every 20 in x and y so a x=-36 DNE (no index) J.H/R.K
    y = (180 - floor(point.y, 20)) / 20
    index = int(x + y * 20) #This finds the index value for a vector located at some (x,y) J.H/R.K
    return index


def valid(point):
    """Return True if point is valid in tiles."""
    index = offset(point) #Finds the index of the vector using above function J.H/R.K

    if tiles[index] == 0: #Return 'False' when the the tile index is 0 because it's not a valid point for Pacman B.C
        return False

    index = offset(point+19)

    if tiles[index] == 0:
        return False

    return point.x % 20 == 0 or point.y % 20 == 0 #Because everything moves by adding/subtracting 5 in either (x,y) (it either changes x or y NOT both)
                                                  #So if this was an AND statement everytime the x or y value would change by 5 it would read False
                                                  #As if pacman was at (80,60) for example and moved +5 he would be at (85,60) and even if this was a valid postion
                                                  #85%20 is NOT zero so it would incorrectly return False if it was an AND statement instead of an or statement J.H
def world():
    """Draw world using path."""
    bgcolor('black')#The background color was fixed as 'black' B.C
    path.color('blue') #Using ".color()" method, the color of the path was assigned as 'blue' B.C

    for index in range(len(tiles)):
        tile = tiles[index] #the map

        if tile > 0: #if the index is 1 or not first square is at -200,180 and moves to the right by 20 every index and -20 in y every 20 indexs! J.H
            x = (index % 20) * 20 - 200
            y = 180 - (index // 20) * 20
            square(x, y)

            if tile == 1: 
                path.up()
                path.goto(x + 10, y + 10) #Moves the turtle object "path" to the middle of every blue square J.H
                path.dot(2, 'white') #Draws the white dots on the map that pacman is going to collect in the middle of each blue square J.H


def move():
    """Move pacman and all ghosts."""
    writer.undo()
    writer.write(state['score'])  # Using ".write(state['score'])" method, the 'writter' writes down the score to show the change B.C

    clear()

    if valid(pacman + aim): #Valid function checks if a proper postion vector is given, and if so, Pacman moves in the assigned direction(aim) B.C
        pacman.move(aim)

    index = offset(pacman) #Sets the index to be pacman's current index in tiles J.H

    if tiles[index] == 1: #The program check if the value at the index pacman is at is eqaul to 1 B.C
        tiles[index] = 2 #If the index pacman was at had a value equal to one change its value to 2 J.H 
        state['score'] += 1 #When the value at tiles[index] is changed to 2 increase the score by 1
        x = (index % 20) * 20 - 200
        y = 180 - (index // 20) * 20
        square(x, y) #When the index value is changed from 1-->2 it draws a new blue square on the (x,y) postion of where that square was which makes the white dots
                     #"disappear" when pacman "collects" them J.H

    up()
    goto(pacman.x + 10, pacman.y + 10)         #Goes to the center of initial tile of pacman R.K
    dot(20, 'yellow')                          #Creates a yellow dot of size 20 representing pacman R.K

    for point, course in ghosts:
        if valid(point + course):
            point.move(course)
        else:
            options = [
                vector(5, 0), #Ghosts speed J.H
                vector(-5, 0),
                vector(0, 5),
                vector(0, -5),
            ]
            plan = choice(options)
            course.x = plan.x
            course.y = plan.y

        up()
        goto(point.x + 10, point.y + 10)           #Goes to center of initial tile of ghost R.K
        dot(20, 'red')                             #Creates a ghost R.K

    update()

    for point, course in ghosts:                   #This checks if pacman has collided with a ghost if he does the game...kinda just crashes J.H
        if abs(pacman - point) < 20:
            return

    ontimer(move, 100)


def change(x, y): # If the change made is considered as 'valid', Pacman moves into a new point with a changed aim based on the given vector(x,y)  B.C 
    """Change pacman aim if valid."""
    if valid(pacman + vector(x, y)):
        aim.x = x
        aim.y = y


setup(420, 420, 370, 0)
hideturtle()
tracer(False)
writer.goto(160, 160)
writer.color('white') # The color is set to be 'white' for writer; one of the basic settings for the clear operation of the game B.C
writer.write(state['score']) # The writer operator shows the current score to users whenever Pacman collides with a tile of index of 1 B.C
listen()

onkey(lambda: change(5, 0), 'Right') #Speed of up,down,left,right of pacman J.H
onkey(lambda: change(-5, 0), 'Left')
onkey(lambda: change(0, 5), 'Up')
onkey(lambda: change(0, -5), 'Down')
world()
move()
done() #Allows for input from keyboard J.H

